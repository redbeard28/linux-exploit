#!/bin/sh
#set -x
###################################################################################
#
#               Librairie de fonctions necessaires aux scripts
#
#                       By Jeremie CUADRADO le 11-07-2011
#
###################################################################################
#
#       J.CUADRADO le 29/02/2012
#               Ajout fct central logging
#
###################################################################################

. /exploit/librairies/variables_globales.sh

####################################################################################
#################################### MAIL_TO #####################################
# Fonction mail_to permet d'envoyer les mails aux admin pour les controles divers
mail_to() {

# On recupere en entree l @ mail destinataire, le sujet ainsi que le continu
MAILT_DESTI=$1
MAIL_SUJET=$2
MAIL_CONTENU=$3
MAIL_PIECEJOINT=$4

if [ -z $MAILT_DESTI ] && [ -z $MAIL_SUJET ] && [ -z $MAIL_CONTENU ] ; then
        return 1
fi

if [ -z $MAIL_PIECEJOINT ] ; then
        #mutt -e "set content_type=text/html" -s "$MAIL_SUJET" $MAILT_DESTI < $MAIL_CONTENU ; return 0
        mutt  -s "$MAIL_SUJET" $MAILT_DESTI < $MAIL_CONTENU ; return 0
else
         #mutt -e "set content_type=text/html" -s "$MAIL_SUJET" $MAILT_DESTI -a $MAIL_PIECEJOINT < $MAIL_CONTENU ; return 0
         mutt -s "$MAIL_SUJET" $MAILT_DESTI -a $MAIL_PIECEJOINT < $MAIL_CONTENU ; return 0
fi
}
####################################################################################




#################################### FREE_SPACE ###################################
# Fonction free_space test de l'espace disque par rapport au taux d occupation OCC_DISK
free_space() {

# On recupere les entree 1 et 2 (taux d'occupation declencheur de l alerte et FS a surveiller)
OCC_DISK=$1
FS_WATCH=$2

MAILTO_ADMIN=$3
HOST_MAIL=$4

SPACE_RESULT=$(df -h |grep $FS_WATCH |grep -vE '^Filesystem|tmpfs|cdrom|Occ.' | awk '{ print $5 }'| awk '{ print $1}' | cut -d'%' -f1)


FS_MAIL_CONTENU=fic_temp.txt

echo "Espace disponible sur $HOST_MAIL" > $FS_MAIL_CONTENU
echo "" >> $FS_MAIL_CONTENU
echo "" >> $FS_MAIL_CONTENU
df -h >> $FS_MAIL_CONTENU

if [ $SPACE_RESULT -ge $OCC_DISK ] ; then
        mutt  -s "[INFRA][EXPLOITGFI][Disque remplis a plus de $OCC_DISK% ]" $MAILTO_ADMIN < $FS_MAIL_CONTENU

fi
}
#####################################################################################

###################################################################################
####### Function free_space2()
###################################################################################
# Fonction free_space2 test de l'espace disque par rapport au taux d occupation OCC_DISK
free_space2() {


#On initialise le variables de travail
local HOST_TO_CHECK=$1          # HOST a checker
local FS_WATCH=$2                               # FS a surveiller
local OCC_DISK=$3                               # Seuil d alerte
local TMP_FILES_FOLDER=$4               # Rep de travail avec droits pour le user expgfi!!


if [ $FS_WATCH != 'tous' ]; then

        ssh root@$HOST_TO_CHECK "df -h |grep "$FS_WATCH" |grep -vE '^Filesystem|tmpfs|cdrom|Occ.' | awk '{ print \$5 }'| awk '{ print \$1 }' | cut -d'%' -f1 > /tmp/$HOST_TO_CHECK-check_FS.log"
        scp root@$HOST_TO_CHECK:/tmp/$HOST_TO_CHECK-check_FS.log $TMP_FILES_FOLDER/
        SPACE_RESULT=$(cat $TMP_FILES_FOLDER/$HOST_TO_CHECK-check_FS.log)
        if [ $SPACE_RESULT -ge $OCC_DISK ] ; then
                echo "<html><head><title>$HOST_TO_CHECK ALERTE FS</title></head><body>" >> $MAIL_CONTENU
                echo " ################################################## " >> $MAIL_CONTENU
                echo "                          $HOST_TO_CHECK                  " >> $MAIL_CONTENU
                echo "                                              " >> $MAIL_CONTENU
                echo "      ALERTE /$FS_WATCH                       " >> $MAIL_CONTENU
                echo "        DEPASSE LE SEUIL de $OCC_DISK %       " >> $MAIL_CONTENU
                echo "                                                                                          " >> $MAIL_CONTENU
                echo " ################################################## " >> $MAIL_CONTENU
                echo "<br>" >> $MAIL_CONTENU
                echo "<br>" >> $MAIL_CONTENU
                ssh root@$HOST_TO_CHECK "df -h |egrep 'Mon|$FS_WATCH' > /tmp/$HOST_TO_CHECK-ALERTE-check_FS.log"
                scp root@$HOST_TO_CHECK:/tmp/$HOST_TO_CHECK-ALERTE-check_FS.log $TMP_FILES_FOLDER/
                cat $TMP_FILES_FOLDER/$HOST_TO_CHECK-ALERTE-check_FS.log >> $MAIL_CONTENU

                echo "<br>" >> $MAIL_CONTENU
                echo "<br>" >> $MAIL_CONTENU
                echo "<br>" >> $MAIL_CONTENU
                fct_check_fs $HOST_TO_CHECK $TMP_FILES_FOLDER
                echo "</body></html>" >> $MAIL_CONTENU
        else
                echo " ################################################## " >> $MAIL_CONTENU
                echo "                          $HOST_TO_CHECK                                          " >> $MAIL_CONTENU
                echo "                                                                                                  " >> $MAIL_CONTENU
                echo "  LE FS /$FS_WATCH NE DEPASSE PAS                                 " >> $MAIL_CONTENU
                echo "                  LE SEUIL de $OCC_DISK %                                 " >> $MAIL_CONTENU
                echo "                                                                                                  " >> $MAIL_CONTENU
                echo " ################################################## " >> $MAIL_CONTENU
                echo "" >> $MAIL_CONTENU
        fi

else
        fct_check_fs $HOST_TO_CHECK $TMP_FILES_FOLDER
fi
}
###################################################################################

###################################################################################
#### Function fct_mount_cifs()
###################################################################################
fct_mount_cifs() {

local PATH_SHARE=$1
local PATH_LOCAL=$2
local CREDENTIALS=$3

sudo mount -t cifs $PATH_SHARE $PATH_LOCAL  -o credentials=$CREDENTIALS,ro
}

###################################################################################
#### Function fct_check_file_exist()  ->>> flag_pas_toucher <<<-
###################################################################################
fct_check_file_exist() {
local FLAG_TO_TEST=$1

if [ -f $FLAG_TO_TEST ]; then
        return 0
else
        return 1
        echo " ################################## "
        echo " #                Montage absent !                # "
        echo " ################################## "
fi
}

###################################################################################
#################################### CHECK_FS ###################################
##### On rapatrie les FS brut de fonderie

#On initialise le variables de travail
fct_check_fs() {

local HOST_TO_CHECK=$1
local TMP_FILES_FOLDER=$2

ssh root@$HOST_TO_CHECK "df -h  |grep -vE '^tmpfs|cdrom|Occ.' > /tmp/$HOST_TO_CHECK-log.tmp"
scp root@$HOST_TO_CHECK:/tmp/$HOST_TO_CHECK-log.tmp $TMP_FILES_FOLDER/

if [ -e $TMP_FILES_FOLDER/$HOST_TO_CHECK-log.tmp ] ; then
        echo "" >>  $MAIL_CONTENU
        echo "" >>  $MAIL_CONTENU
        echo "Espace disponible sur $HOST_TO_CHECK" >> $MAIL_CONTENU
        echo "" >>  $MAIL_CONTENU
        cat  $TMP_FILES_FOLDER/$HOST_TO_CHECK-log.tmp >> $MAIL_CONTENU
else
        echo "$(date +%d-%m-%Y) $(date +%H:%M)  $HOST_TO_CHECK-log.tmp not exist" >> $TMP_FILES_FOLDER/FND-log-defaut.tmp
fi


}
#####################################################################################

###################################################################################
#### Function check_http HOSTNAME PORT TMP_FOLDER
###################################################################################
check_http() {
local HOST_TO_CHECK=$1
local PORT_NUM=$2
local TMP_FILES_FOLDER=$3

ssh root@$HOST_TO_CHECK "netstat -anpt|grep $PORT_NUM|awk '{ print \$4 }'|cut -d':' -f2 > /tmp/$HOST_TO_CHECK-log.tmp"
scp root@$HOST_TO_CHECK:/tmp/$HOST_TO_CHECK-log.tmp $TMP_FILES_FOLDER/
if [ -e $TMP_FILES_FOLDER/$HOST_TO_CHECK-log.tmp ] ; then
        grep $PORT_NUM $TMP_FILES_FOLDER/$HOST_TO_CHECK-log.tmp
        if [ $? == '0' ] ; then
                echo "" >>  $MAIL_CONTENU
                echo " Le service http est bien a l ecoute sur le port $PORT_NUM"  >>  $MAIL_CONTENU
                echo "" >>  $MAIL_CONTENU
        else
                echo "" >>  $MAIL_CONTENU
                echo " ======> port $PORT_NUM  HS <=====" >>  $MAIL_CONTENU
                echo "" >>  $MAIL_CONTENU
        fi

        else
                echo "" >>  $MAIL_CONTENU
                echo " ERROR :  Le script n a pas pu obtenir les infos sur le check_http" >>  $MAIL_CONTENU
                echo "" >>  $MAIL_CONTENU
fi
}
#####################################################################################

#####################################################################################
#### Function fct_check_fs HOSTNAME TMP_FOLDER
###################################################################################

#On initialise le variables de travail
fct_check_fs() {

local HOST_TO_CHECK=$1
local TMP_FILES_FOLDER=$2

ssh root@$HOST_TO_CHECK "df -h  |grep -vE '^tmpfs|cdrom|Occ.' > /tmp/$HOST_TO_CHECK-log.tmp"
scp root@$HOST_TO_CHECK:/tmp/$HOST_TO_CHECK-log.tmp $TMP_FILES_FOLDER/

if [ -e $TMP_FILES_FOLDER/$HOST_TO_CHECK-log.tmp ] ; then
        echo "" >>  $MAIL_CONTENU
        echo "" >>  $MAIL_CONTENU
        echo "Espace disponible sur $HOST_TO_CHECK" >> $MAIL_CONTENU
        echo "" >>  $MAIL_CONTENU
        cat  $TMP_FILES_FOLDER/$HOST_TO_CHECK-log.tmp >> $MAIL_CONTENU
else
        echo "" >>  $MAIL_CONTENU
        echo " ERROR :  Le script n a pas pu obtenir les infos sur le fct_check_fs" >>  $MAIL_CONTENU
        echo "" >>  $MAIL_CONTENU

fi


}

#####################################################################################

####################################################################################
##### LOG functions
f_LOG() {
echo "`date +%d/%m/%Y` `date +%H:%M:%S`  $job_name $@" >> $LOG_EMPLACEMENT
}

f_INFO() {
echo "$@"
f_LOG "[INFO] $@"
}

f_WARNING() {
echo "$@"
f_LOG "[WARN] $@"
}

f_ERROR() {
echo "$@"
f_LOG "[ERRO] $@"
}
####################################################################################

####################################################################################
##### make_pidibackup    Creation d un pid

make_pidbackup() {

echo $pid >  /exploit/run/$name_host.$job_name.pid
}
####################################################################################

####################################################################################
##### remove_pidbackup    Suppression d un pid
remove_pidbackup() {
rm -rf /exploit/run/$name_host.$job_name.pid
}
####################################################################################

####################################################################################
#### get_pidbackup()     Verification existance pid

get_pidbackup() {
if [ -f "/exploit/run/$name_host.$job_name.pid" ];then
        f_WARNING "$name_host : La sauvegarde est deja en cours"
        exit 0
fi
}
####################################################################################
